{"version":3,"sources":["components/Card/Card.js","components/CardSet/CardSet.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","state","audio","Audio","getUrl","note","prevProps","this","setState","console","log","load","play","className","onClick","hide","Component","CardSet","cards","map","card","index","key","App","notes","playing","count","active","length","handleGuess","handleStart","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+SAuCeA,G,kBAlCb,WAAYC,GAAQ,IAAD,8BACjB,+CACKC,MAAQ,CACXC,MAAO,IAAIC,MAAM,EAAKC,OAAOJ,EAAMK,QAHpB,E,gFAOAC,GACbA,EAAUD,OAASE,KAAKP,MAAMK,MAChCE,KAAKC,SAAS,CACZN,MAAO,IAAIC,MAAMI,KAAKH,OAAOG,KAAKP,MAAMK,W,6BAKvCA,GAEL,OADAI,QAAQC,IAAIL,GACL,sBAAwBA,EAAO,S,6BAItCE,KAAKN,MAAMC,MAAMS,OACjBJ,KAAKN,MAAMC,MAAMU,S,+BAGT,IAAD,OACP,OACE,yBAAKC,UAAU,QACb,4BAAQA,UAAU,eAAeC,QAAS,kBAAM,EAAKF,SAAUL,KAAKP,MAAMe,KAAyB,IAAlBR,KAAKP,MAAMK,W,GA9BjFW,cCWJC,G,MAVC,SAAAjB,GAAK,OACnB,wBAAIa,UAAU,WACXb,EAAMkB,MAAMC,KAAI,SAACC,EAAMC,GAAP,OACf,wBAAIC,IAAKD,EAAOR,UAAU,iBACxB,kBAAC,EAAD,CAAMR,KAAMe,WCuDLG,G,kBAxDb,aAAe,IAAD,8BACZ,+CACKtB,MAAQ,CACXuB,MAAO,CACL,MACA,MACA,OAEFC,SAAS,EACTC,MAAO,EACPC,OAAQ,GAVE,E,2EAeZpB,KAAKC,SAAS,CACZiB,SAAS,EACTE,OAAQ,EACRD,MAAO,M,kCAICrB,GACV,GAAIA,IAASE,KAAKN,MAAMuB,MAAMjB,KAAKN,MAAM0B,QAAS,CAChD,IAAMD,EAAQnB,KAAKN,MAAMyB,MAAQ,EAC3BD,EAAUC,IAAUnB,KAAKN,MAAMuB,MAAMI,OAC3CrB,KAAKC,SAAS,CACZkB,MAAOA,EACPC,OAAQD,EACRD,QAASA,O,+BAKL,IAAD,OACP,OACE,yBAAKZ,UAAU,OACXN,KAAKN,MAAMwB,QAKX,oCACE,kBAAC,EAAD,CAAMpB,KAAME,KAAKN,MAAMuB,MAAMjB,KAAKN,MAAM0B,QAASZ,MAAM,IACvD,4BACGR,KAAKN,MAAMuB,MAAML,KAAI,SAACd,EAAMgB,GAAP,OACpB,wBAAIC,IAAKD,GAAO,4BAAQP,QAAS,kBAAM,EAAKe,YAAYxB,KAAQA,SARtE,oCACE,kBAAC,EAAD,CAASa,MAAOX,KAAKN,MAAMuB,QAC3B,4BAAQV,QAAS,kBAAM,EAAKgB,gBAA5B,e,GA1CMd,cCOEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6b1b216b.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './Card.css'\n\nclass Card extends Component {\n\n  constructor(props) {\n    super();\n    this.state = {\n      audio: new Audio(this.getUrl(props.note))\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.note !== this.props.note) {\n      this.setState({\n        audio: new Audio(this.getUrl(this.props.note))\n      })\n    }\n  }\n\n  getUrl(note) {\n    console.log(note)\n    return 'assets/audio/notes/' + note + '.m4a'\n  }\n\n  play() {\n    this.state.audio.load()\n    this.state.audio.play()\n  }\n\n  render() {\n    return (\n      <div className=\"Card\">\n        <button className=\"Card__button\" onClick={() => this.play()}>{!this.props.hide ? this.props.note : \"?\"}</button>\n      </div>\n    );\n  }\n}\n\nexport default Card\n","import React from 'react';\nimport Card from '../Card/Card';\nimport './CardSet.css';\n\nconst CardSet = props => (\n  <ul className=\"CardSet\">\n    {props.cards.map((card, index) =>\n      <li key={index} className=\"CardSet__item\">\n        <Card note={card} />\n      </li>\n    )}\n  </ul>\n);\n\nexport default CardSet;\n","import React, { Component } from 'react'\nimport CardSet from './components/CardSet/CardSet'\nimport Card from './components/Card/Card'\nimport './App.css'\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      notes: [\n        'do4',\n        're4',\n        'mi4',\n      ],\n      playing: false,\n      count: 0,\n      active: 0,\n    }\n  }\n\n  handleStart() {\n    this.setState({\n      playing: true,\n      active: 0,\n      count: 0,\n    })\n  }\n\n  handleGuess(note) {\n    if (note === this.state.notes[this.state.active]) {\n      const count = this.state.count + 1\n      const playing = count !== this.state.notes.length\n      this.setState({\n        count: count,\n        active: count,\n        playing: playing,\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {!this.state.playing ? \n          <>\n            <CardSet cards={this.state.notes}/>\n            <button onClick={() => this.handleStart()}>Start</button>\n          </> :\n          <>\n            <Card note={this.state.notes[this.state.active]} hide={true}/>\n            <ul>\n              {this.state.notes.map((note, index) => \n                <li key={index}><button onClick={() => this.handleGuess(note)}>{note}</button></li>\n              )}\n            </ul>\n          </>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}