{"version":3,"sources":["components/Note/Note.js","components/NoteSet/NoteSet.js","components/Choice/Choice.js","components/ChoiceSet/ChoiceSet.js","App.js","serviceWorker.js","index.js"],"names":["Note","props","state","audio","Audio","getUrl","note","prevProps","this","setState","load","play","className","onClick","hide","Component","NoteSet","notes","map","index","key","Choice","choice","select","ChoiceSet","choices","selectChoice","App","statusMessages","start","match","fail","win","count","active","reveal","shuffledNotes","message","shuffle","length","setTimeout","items","newItems","slice","i","j","Math","floor","random","handleStart","handleGuess","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f18df435.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './Note.css'\n\nclass Note extends Component {\n\n  constructor(props) {\n    super();\n    this.state = {\n      audio: new Audio(this.getUrl(props.note))\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.note !== this.props.note) {\n      this.setState({\n        audio: new Audio(this.getUrl(this.props.note))\n      })\n    }\n  }\n\n  getUrl(note) {\n    return 'assets/audio/notes/' + note + '.m4a'\n  }\n\n  play() {\n    this.state.audio.load()\n    this.state.audio.play()\n  }\n\n  render() {\n    return (\n      <div className=\"Note\">\n        <button className=\"Note__button\" onClick={() => this.play()}>{!this.props.hide ? this.props.note : \"?\"}</button>\n      </div>\n    );\n  }\n}\n\nexport default Note\n","import React from 'react'\nimport Note from '../Note/Note'\nimport './NoteSet.css'\n\nconst NoteSet = props => (\n  <ul className=\"NoteSet\">\n    {props.notes.map((note, index) =>\n      <li key={index} className=\"NoteSet__item\">\n        <Note note={note} hide={props.hide}/>\n      </li>\n    )}\n  </ul>\n);\n\nexport default NoteSet;\n","import React, { Component } from 'react'\nimport './Choice.css'\n\nclass Choice extends Component {\n\n  select() {\n    this.props.onClick(this.props.choice)\n  }\n\n  render() {\n    return (\n      <div className=\"Choice\">\n        <button className=\"Choice__button\" onClick={() => this.select()}>{this.props.choice}</button>\n      </div>\n    );\n  }\n}\n\nexport default Choice\n","import React from 'react';\nimport Choice from '../Choice/Choice';\nimport './ChoiceSet.css';\n\nconst ChoiceSet = props => (\n  <ul className=\"ChoiceSet\">\n    {props.choices.map((choice, index) =>\n      <li key={index} className=\"ChoiceSet__item\">\n        <Choice choice={choice} onClick={props.selectChoice} />\n      </li>\n    )}\n  </ul>\n);\n\nexport default ChoiceSet;\n","import React, { Component } from 'react'\nimport NoteSet from './components/NoteSet/NoteSet'\nimport ChoiceSet from './components/ChoiceSet/ChoiceSet'\nimport './App.css'\n\nclass App extends Component {\n\n  statusMessages = {\n    start: \"Push the start button to start your training.\",\n    play: \"Push the wild card to listen to a musical note, then select the correct note from the multiple choices.\",\n    match: \"Very well! Now guess the next note.\",\n    fail: \"Try again! That was not the correct note.\",\n    win: \"Excellent! You completed this round.\",\n  }\n\n  constructor() {\n    super();\n    this.state = {\n      count: 0,\n      active: 0,\n      reveal: false,\n      shuffledNotes: [],\n      message: this.statusMessages.start,\n    }\n  }\n\n  handleStart() {\n    this.setState({\n      active: 0,\n      count: 0,\n      shuffledNotes: this.shuffle(this.props.notes),\n      message: this.statusMessages.start\n    })\n  }\n\n  handleGuess(note) {\n    let message = this.statusMessages.fail\n    if (note === this.state.shuffledNotes[this.state.active]) {\n      const count = this.state.count + 1\n      let shuffledNotes = this.state.shuffledNotes\n      message = this.statusMessages.match\n      if (count === shuffledNotes.length) {\n        shuffledNotes = []\n        message = this.statusMessages.win\n      }\n      this.setState({\n        reveal:true,\n        message: message,\n      })\n      setTimeout(() => {\n        this.setState({\n          count: count,\n          active: count,\n          shuffledNotes: shuffledNotes,\n          reveal:false,\n        })\n      }, 1000);\n    }\n    else if (this.state.reveal) {\n      return false;\n    }\n    else {\n      this.setState({\n        message: message\n      })\n    }\n  }\n\n  /**\n   * Fisher-Yates shuffle algorithm.\n   * Source: https://javascript.info/task/shuffle\n   * \n   * @param [] items \n   * \n   * @return []\n   */\n  shuffle(items) {\n    let newItems = items.slice(0)\n\n    for (let i = newItems.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [newItems[i], newItems[j]] = [newItems[j], newItems[i]];\n    }\n\n    return newItems\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className=\"App__name\">Hearing Trainer</h1>\n        {this.state.shuffledNotes.length === 0 ? \n          <div className=\"App__start-section\">\n            <NoteSet notes={this.props.notes} hide={false}/>\n            <button className=\"App__start-button\" onClick={() => this.handleStart()}>Start</button>\n          </div> :\n          <div className=\"App__start-section\">\n            <NoteSet notes={[this.state.shuffledNotes[this.state.active]]}  hide={!this.state.reveal} />\n            <ChoiceSet choices={this.props.notes} selectChoice={(note) => this.handleGuess(note)} />\n          </div>\n        }\n        <div className=\"App__status\">\n          <p>{this.state.message}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst notes = [\n  'C4',\n  'D4',\n  'E4',\n  'F4',\n  'G4',\n  'A4',\n  'B4',\n  'C5',\n]\n\nReactDOM.render(<App notes={notes} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}